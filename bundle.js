(()=>{"use strict";var e={5426:(e,n,t)=>{t.d(n,{Z:()=>d});var r=t(7537),o=t.n(r),a=t(3645),i=t.n(a)()(o());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;600;700&display=swap);"]),i.push([e.id,'/* || GLOBAL STYLES */\n\n:root.light {\n    --accent-color: #03A696;\n    --aside-color: #e0ddd1;\n    --aside-hover-color: #dbd9cf;\n    --main-color: #ECE8DD;\n    --text-color: 0, 0, 0;\n    --todo-hover: 0, 0, 0;\n    --todo-btn-hover: #e0dcd1;\n    --priority-low: #36AE7C;\n    --priority-medium: #FF6E31;\n    --priority-high: #EB5353;\n    --todo-title-crossed-color: #bebec2;\n    --todo-title-crossed-bg: #b1b1bb;\n\n}\n:root,\n:root.dark {\n    --accent-color: #03A696;\n    --aside-color: #191919;\n    --aside-hover-color: #353535;\n    --main-color: #161616;\n    --text-color: 255, 255, 255;\n    --todo-hover: 153, 153, 153;\n    --todo-btn-hover: #252525;\n    --priority-low: #36AE7C;\n    --priority-medium: #FF6E31;\n    --priority-high: #EB5353;\n    --todo-title-crossed-color: #464646;\n    --todo-title-crossed-bg: #3d3d3d;\n}\n\n* {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n\n\nbody {\n    color: rgb(var(--text-color), 0.8);\n    width: 100vw;\n    height: 100vh;\n    font-family: \'Open Sans\', sans-serif;\n    overflow: hidden; \n}\n\n\n/* FORM OVERLAY FORM */\n\n.overlay-create-new,\n.overlay-edit,\n.overlay-view-details,\n.overlay-delete-item-dialogue,\n.overlay-add-new-project,\n.overlay-delete-project-dialogue {\n    z-index: 12;\n    position: fixed;\n    top: 0;\n    left: 0;\n    padding: 10px;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgba(0, 0, 0, 0.6);\n    opacity: 0;\n    visibility: hidden;\n    /* display: none; */\n    -webkit-transition: opacity 0.3s 0s, visibility 0s 0.3s;\n    -moz-transition: opacity 0.3s 0s, visibility 0s 0.3s;\n    transition: opacity 0.3s 0s, visibility 0s 0.3s;\n}\n\n.is-visible {\n    opacity: 1;\n    visibility: visible;\n    /* display: flex; */\n    -webkit-transition: opacity 0.3s 0s, visibility 0s 0s;\n    -moz-transition: opacity 0.3s 0s, visibility 0s 0s;\n    transition: opacity 0.3s 0s, visibility 0s 0s;\n}\n\n.overlay-delete-item-dialogue {\n    text-align: center;\n}\n  \nform.create-new, \nform.edit, \n.view-details-container, \n.delete-dialogue-contents,\nform.add-new-project,\n.delete-project-dialogue-contents {\n\n    background-color: var(--aside-color);\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\n    box-sizing: border-box;\n    width: clamp(350px, 50%, 600px);\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    border-radius: 15px;\n    padding: 1rem;\n\n    -webkit-transform: translateY(-40px);\n    -moz-transform: translateY(-40px);\n    -ms-transform: translateY(-40px);\n    -o-transform: translateY(-40px);\n    transform: translateY(-40px);\n    /* Force Hardware Acceleration in WebKit */\n    -webkit-backface-visibility: hidden;\n    backface-visibility: hidden;\n    -webkit-transition-property: -webkit-transform;\n    -moz-transition-property: -moz-transform;\n    transition-property: transform;\n    -webkit-transition-duration: 0.3s;\n    -moz-transition-duration: 0.3s;\n    transition-duration: 0.3s;\n}\n\n.create-new-main, \n.edit-main {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n}\n\n.add-new-project-main {\n    display: flex;\n    flex-direction: column;\n    font-size: 1.2rem;\n}\n\n.create-new-main input,\n.edit-main input {\n    outline: none;\n    font-size: 0.8rem;\n    color: var(--text-color);\n    background-color: var(--aside-color);\n} \n\n.add-new-project input {\n    border: 1px solid rgb(131, 131, 131);\n    border-radius: 8px;\n    padding: 0.5rem;\n    font-size: 1.2rem;\n    color: var(--text-color);\n    background-color: var(--aside-color);\n    margin: 0.5rem 0 1rem 0;\n}\n\n.add-new-project input:focus {\n    outline: none;\n    border: 1px solid var(--accent-color);\n}\n\n.create-new-main input:nth-child(1), .edit-main input:nth-child(1) {\n    font-size: 1.2rem;\n    font-weight: 700;\n}\n\n.create-new-options, .edit-options {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n\n\n\n\n.priority {\n    height: 30px;\n    display: flex;\n    align-items: center;\n    gap: 0.8rem;\n}\n\n.priority-radios {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    /* cursor: pointer; */\n}\n\ninput[type="radio"] {\n    -webkit-appearance: none;\n    appearance: none;\n    /* For iOS < 15 to remove gradient background */\n    background-color: var(--main-color);\n    /* Not removed via appearance */\n    margin: 0;\n    font: inherit;\n    color: currentColor;\n    width: 1.15em;\n    height: 1.15em;\n    border: 0.15em solid currentColor;\n    border-radius: 50%;\n    display: grid;\n    place-content: center;\n    cursor: pointer;\n}\n\ninput[type="radio"]::before {\n    content: "";\n    width: 0.65em;\n    height: 0.65em;\n    border-radius: 50%;\n    transform: scale(0);\n    transition: 120ms transform ease-in-out;\n    box-shadow: inset 1em 1em var(--accent-color);\n}\n\ninput[type="radio"]:checked::before {\n    transform: scale(1);\n}\n\n\n\n#priority-low, #priority-low-edit {\n    border: 0.15em solid var(--priority-low);\n}\n\n#priority-low::before, #priority-low-edit::before {\n    box-shadow: inset 1em 1em var(--priority-low);\n}\n\n#priority-medium, #priority-medium-edit {\n    border: 0.15em solid var(--priority-medium);\n}\n\n#priority-medium::before, #priority-medium-edit::before {\n    box-shadow: inset 1em 1em var(--priority-medium);\n}\n\n#priority-high, #priority-high-edit {\n    border: 0.15em solid var(--priority-high);\n}\n\n#priority-high::before, #priority-high-edit::before {\n    box-shadow: inset 1em 1em var(--priority-high);\n}\n\n.create-new-options-main,\n.create-new-actions,\n.edit-options-main,\n.edit-actions {\n    display: flex;\n    gap: 0.8rem;\n}\n\n.create-new-options-main, .edit-options-main {\n    align-self: flex-end;\n} \n\n.create-new-options button,  \n.create-new-actions button,\n.edit-options button,  \n.edit-actions button {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    font-size: 0.8rem;\n    padding: 0.4rem 0.6rem;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.delete-dialogue-options,\n.delete-project-dialogue-options {\n    display: flex;\n    justify-content: center;\n    gap: 1.2rem;\n}\n\n.delete-project-dialogue-warning {\n    text-align: center;\n}\n\n.delete-project-dialogue-warning p:nth-child(2) {\n    color: var(--priority-high);\n    font-size: 0.8rem;\n    margin-top: 0.8rem;\n}\n\n.add-project-options  {\n    display: flex;\n    justify-content: flex-end;\n    gap: 1rem;\n}\n\n.dialogue-option,\n.add-project-option {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    font-size: 0.8rem;\n    padding: 0.4rem 0.6rem;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n/* .due-date {\n    \n    gap: 5px;\n} */\n\n#new-due-date, #edit-due-date {\n    color: var(--text-color);\n    display: inline-flex;\n    align-items: flex-end;\n    font-size: 0.8rem;\n    outline: none;\n    background-color: transparent;\n    appearance: none;\n    text-transform: uppercase;\n    border: 1px solid var(--accent-color);\n    border-radius: 5px;\n    padding: 0.3rem 0.5rem;\n    user-select: none;\n}\n\ninput::-webkit-datetime-edit-day-field:focus,\ninput::-webkit-datetime-edit-month-field:focus,\ninput::-webkit-datetime-edit-year-field:focus {\n    background-color: var(--accent-color);\n    color: white;\n    outline: none;\n}\n\n.create-new-divider, .edit-divider {\n    width: 100%;\n    height: 1px;\n    background-color: #3b3b3b5b;\n}\n\n.create-new-actions, .edit-actions {\n    align-self: flex-end;\n    font-weight: 600;\n}\n\n.close-view-details {\n    position: absolute;\n    font-size: 1.2rem;\n    right: 14px;\n    top: 14px;\n    cursor: pointer;\n}\n\n.view-details-content {\n    display: flex;\n    flex-direction: column;\n    gap: 1.5rem;\n}\n\n.view-detail{\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.view-detail-priority.high > :first-child {\n    color: var(--priority-high);\n}\n\n.view-detail-priority.medium > :first-child {\n    color: var(--priority-medium);\n}\n\n.view-detail-priority.low > :first-child {\n    color: var(--priority-low);\n}\n\n.confirm-btn {\n    background-color: var(--accent-color);\n    color: rgb(255, 255, 255, 0.8);\n    font-weight: 700;\n}\n\n.confirm-delete-btn {\n    background-color: var(--priority-high);\n    color: rgb(255, 255, 255, 0.8);\n    font-weight: 700;\n}\n\n/* || CONTENTS */\n.contents {\n    height: 100%;\n    display: grid;\n    grid-template-columns: auto 3fr;\n    grid-template-rows: auto 1fr;\n    grid-template-areas: \n    "header header"\n    "nav main";\n    transition: grid-template-columns 0.5s ease-in-out;\n\n}\n\n/* @media screen and (max-width: 700px) {\n    .contents {\n      grid-template-columns: 0 3fr;\n    }\n  } */\n\na {\n    color: inherit;\n    text-decoration: none;\n    pointer-events: none;\n}\n\n/* || HEADER */\n.header {\n    grid-area: header;\n    color: white;\n    height: 50px;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 10px;\n    font-size: 1.3rem;\n    padding: 2rem;\n    background-color: var(--accent-color);\n}\n\n.header-nav {\n    display: flex;\n    gap: 0.625rem;\n}\n\n.header button {\n    color: white;\n    background: none;\n    height: 24px;\n    width: 24px;\n    border-radius: 5px;\n    font-size: 1.4rem;\n    cursor: pointer;\n}\n\n.header button:hover {\n    background: hsla(0,0%,100%,.2);\n}\n\n.header-actions {\n    display: flex;\n    align-items: center;\n    gap: 0.625rem;\n}\n\n\n/* || TOGGLE DARK/LIGHT THEME */\n.toggle-theme input[type="checkbox"] {\nvisibility: hidden;\ndisplay: none;\n}\n\n.toggle-theme *,\n.toggle-theme ::after,\n.toggle-theme ::before {\nbox-sizing: border-box;\n}\n\n/* The switch - the box around the slider */\n.toggle-theme .switch {\n--width-of-switch: 2.5em;\n--height-of-switch: 1.3em;\n/* size of sliding icon -- sun and moon */\n--size-of-icon: 1em;\n/* it is like a inline-padding of switch */\n--slider-offset: 0.3em;\nposition: relative;\nwidth: var(--width-of-switch);\nheight: var(--height-of-switch);\ndisplay: inline-block;\n}\n\n/* The slider */\n.toggle-theme .slider {\nposition: absolute;\ncursor: pointer;\ntop: 0;\nleft: 0;\nright: 0;\nbottom: 0;\n/* background-color: #f4f4f5; */\nbackground-color: var(--aside-color);\ntransition: .4s;\nborder-radius: 30px;\n}\n\n.toggle-theme .slider:before {\nposition: absolute;\ncontent: "";\nheight: var(--size-of-icon,1.4em);\nwidth: var(--size-of-icon,1.4em);\nborder-radius: 20px;\nleft: var(--slider-offset,0.3em);\ntop: 50%;\ntransform: translateY(-50%);\n/* background: linear-gradient(40deg,#ff0080,#ff8c00 70%); */\nbackground-color: var(--accent-color);\ntransition: .4s;\n}\n\n.toggle-theme input:checked + .slider {\n/* background-color: #303136; */\nbackground: var(--aside-color);\n}\n\n.toggle-theme input:checked + .slider:before {\nleft: calc(100% - (var(--size-of-icon,1.4em) + var(--slider-offset,0.3em)));\n/* background: #303136; */\nbackground: var(--aside-color);\n/* change the value of second inset in box-shadow to change the angle and direction of the moon  */\n/* box-shadow: inset -3px -2px 5px -2px #8983f7, inset -10px -4px 0 0 #a3dafb; */\nbox-shadow: inset -3px -2px 5px -2px var(--accent-color), inset -10px -4px 0 0 var(--accent-color);\n\n}\n\n\n/* || ASIDE */\nnav {\n    width: 0;\n    max-width: 250px;\n    grid-area: nav;\n    overflow: auto;\n    overflow-x: hidden;\n    /* transition: all 1s; */\n    transition: all .5s cubic-bezier(0.4, 0, 0.2, 1);\n    /* transition: max-width .5s cubic-bezier(0.4, 0, 0.2, 1); */\n    background-color: var(--aside-color);\n}\n\n/* @media screen and (max-width: 700px) {\n    nav {\n      max-width: 0;\n    }\n  } */\n\n  @media only screen and (max-width: 625px) {\n    nav {\n        position: absolute;\n        top: 64px;\n        height: 100%;\n        z-index: 10;\n    }\n}\n\n.sidebar-content-nav {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 4rem 1rem 1rem;\n}\n\n.side-nav {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    font-size: 1.3rem;\n    padding: 5px;\n    border-radius: 8px;\n    cursor: pointer;\n}\n\n.side-nav:hover,\n.project-item:hover,\n.project-title-container:hover {\n    background-color: var(--aside-hover-color);\n}\n\n.sidebar-content-projects {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 0 1rem 0 1rem;\n}\n\n.project-title-container {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    border-radius: 8px;\n    padding: 0 5px;\n}\n\n.project-title-container .add-project {\n    cursor: pointer;\n    font-size: 1.4rem;\n}\n\n.project-title {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    font-size: 1.2rem;\n}\n\n.project-item {\n    display: grid;\n    grid-template-columns: 1fr 8fr 1fr;\n    align-items: center;\n    gap: 10px;\n    padding: 5px 5px 5px 10px;\n    border-radius: 8px;\n    cursor: pointer;\n}\n\n.project-item:nth-child(1) {\n    display: none;\n}\n\n.project-item-content {\n    width: 90%;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.delete-project {\n    display: flex;\n    justify-self: flex-end;\n    opacity: 0;\n    padding: 0.5rem;\n    transition: opacity 0.3s ease-in-out;\n}\n\n.project-item:hover .delete-project {\n    opacity: 1;\n    transition: all 0.3s ease-in-out;\n}\n\n.dot {\n    height: 13px;\n    width: 13px;\n    background-color: #b6b6b6;\n    border-radius: 50%;\n    flex-shrink: 0;\n}\n\n/* || MAIN */\n.main-container {\n    grid-area: main;\n    max-height: 100%;\n    max-width: 100%;\n    overflow-x: hidden;\n    overflow-y: hidden;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--main-color);\n    padding-bottom: 4rem;\n}\n\n.main h1 {\n    font-weight: 700;\n}\n\n.add-todo {\n    /* width: clamp(300px, 50%, 750px); */\n    width: 150px;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    border-radius: 15px;\n    /* padding-left: 5px; */\n    user-select: none;\n}\n\n.add-todo-text {\n    cursor: pointer;\n}\n\n@media only screen and (max-width: 700px) {\n    .add-todo {\n        width: 130px;\n        flex-direction: column;\n        justify-content: center;\n        padding-bottom: 0.6rem;\n    }\n    \n}\n\n.add-todo-btn, .add-project{\n    color: var(--text-color);\n    margin-top: 7px;\n    background: none;\n    font-size: 2rem;\n    border-radius: 8px;\n    cursor: pointer;\n    transform: translateZ(0) scale(1);\n    transition: transform .2s;\n}\n\n\n.btn-simple-animation:not(:disabled):hover {\n    transform: scale(1.05);\n}\n\n.btn-simple-animation:not(:disabled):hover:active{\n    transform: scale(1.05) translateY(.125rem);\n}\n\n.add-todo:hover {\n    background-color: var(--todo-btn-hover);\n}\n\n\n.btn-simple-animation:focus {\n    outline: 0 solid transparent;\n}\n\n.btn-simple-animation:focus:before {\ncontent: "";\nleft: calc(-1*.375rem);\npointer-events: none;\nposition: absolute;\ntop: calc(-1*.375rem);\ntransition: border-radius;\nuser-select: none;\n}\n\n.btn-simple-animation:focus:not(:focus-visible) {\noutline: 0 solid transparent;\n}\n\n.btn-simple-animation:focus:not(:focus-visible):before {\nborder-width: 0;\n}\n\n.btn-simple-animation:not(:disabled):active {\ntransform: translateY(.125rem);\n}\n\n\n.todo-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    box-sizing: border-box;\n    padding: 4rem 0 0 2rem;\n}\n\n@media only screen and (max-width: 700px) {\n    .todo-container {\n        align-items: center;\n        padding: 4rem 0 0 0;;\n    }\n}\n\n.todo-container h1 {\n    font-size: 2rem;\n}\n\n.todo-list-container {\n    width: 100%;\n    overflow-y: scroll;\n}\n\n.todo-list {\n    max-width: 100%;\n    max-height: 530px;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    padding: 1rem;\n\n}\n\n@media only screen and (max-width: 700px) {\n    .todo-list {\n        /* width: 90%; */\n        align-items: center;\n    }\n\n}\n\n\n@media only screen and (max-height: 835px) {\n    .todo-list{\n        max-height: 400px;\n    }\n\n}\n\n@media only screen and (max-height: 720px) {\n    .todo-list{\n        max-height: 300px;\n    }\n\n}\n\n\n.todo-list-container::-webkit-scrollbar {\n    width: 5px;\n}\n\n.todo-list-container::-webkit-scrollbar-track {\n    background-color: var(--main-color);\n    border-radius: 100px;\n}\n\n.todo-list-container::-webkit-scrollbar-thumb {\n    background-color: var(--accent-color);\n    /* box-shadow: inset 0 0 6px var(--accent-color); */\n    border-radius: 100px;\n}\n\n#default0 {\n    display: none;\n}\n\n.todo-wrapper {\n    width: clamp(350px, 50%, 750px);\n    padding: 1rem 1rem 1rem 1rem;\n    border-radius: 5px;\n    box-shadow: 2px 1px 2px rgb(var(--todo-hover), 0.15);\n    transition: all 0.3s ease-in-out;\n}\n\n@media only screen and (max-width: 700px) {\n    .todo-wrapper {\n        width: clamp(280px, 50%, 750px);\n    }\n}\n\n.todo-wrapper.priority-low {\n    border-left: 3px solid var(--priority-low);\n}\n\n.todo-wrapper.priority-medium {\n    border-left: 3px solid var(--priority-medium);\n}\n\n.todo-wrapper.priority-high {\n    border-left: 3px solid var(--priority-high);\n}\n\n.todo-wrapper:after {\n    opacity: 0;\n    border-radius: 5px;\n    box-shadow: 0 5px 15px rgb(var(--todo-hover), 0.3);\n    transition: opacity 0.3s ease-in-out;\n}\n\n.todo-wrapper:hover {\n    transform: scale(1.02, 1.02);\n}\n\n/* Fade in the pseudo-element with the bigger shadow */\n.todo-wrapper:hover::after {\nopacity: 1;\n}\n\n.todo-item {\n    display: flex;\n    /* flex-direction: column;\n    gap: 1rem; */\n    align-items: center;\n    justify-content: space-between;\n}\n\n@media only screen and (max-width: 700px) {\n    .todo-item {\n        flex-direction: column;\n        gap: 1rem;\n    }\n}\n\n\n\n.todo-item-actions {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.todo-item-actions button {\n    color: var(--text-color);\n    background: none;\n    height: 19px;\n    width: 25px;\n    border-radius: 5px;\n    font-size: 1.1rem;\n    cursor: pointer;\n}\n\n.todo-item-actions button:hover {\n    background: var(--todo-btn-hover);\n}\n\n.todo-item-due-date {\n    font-weight: 500;\n    font-size: 0.8rem;\n}\n\n.todo-item-actions button.item-details {\n    font-size: 0.625rem;\n    font-weight: 700;\n    width: 45px;\n    border: 1px solid rgb(105, 105, 105);\n}\n\n.todo-item-actions button.item-details:hover {\n    background-color: var(--accent-color);\n    color: white;\n}\n\n.todo-item .cbx {\n-webkit-user-select: none;\nuser-select: none;\n-webkit-tap-highlight-color: transparent;\ncursor: pointer;\n}\n.todo-item .cbx span {\ndisplay: inline-block;\nvertical-align: middle;\ntransform: translate3d(0, 0, 0);\n}\n.todo-item .cbx span:first-child {\nposition: relative;\nwidth: 24px;\nheight: 24px;\nborder-radius: 50%;\ntransform: scale(1);\nvertical-align: middle;\nborder: 1px solid #B9B8C3;\ntransition: all 0.2s ease;\n}\n.todo-item .cbx span:first-child svg {\nposition: absolute;\nz-index: 1;\ntop: 8px;\nleft: 6px;\nfill: none;\nstroke: white;\nstroke-width: 2;\nstroke-linecap: round;\nstroke-linejoin: round;\nstroke-dasharray: 16px;\nstroke-dashoffset: 16px;\ntransition: all 0.3s ease;\ntransition-delay: 0.1s;\ntransform: translate3d(0, 0, 0);\n}\n.todo-item .cbx span:first-child:before {\ncontent: "";\nwidth: 100%;\nheight: 100%;\nbackground: #579BB1;\ndisplay: block;\ntransform: scale(0);\nopacity: 1;\nborder-radius: 50%;\ntransition-delay: 0.2s;\n}\n.todo-item .cbx span:last-child {\nmargin-left: 8px;\n}\n.todo-item .cbx span:last-child:after {\ncontent: "";\nposition: absolute;\ntop: 12px;\nleft: 0;\nheight: 1px;\nwidth: 100%;\nbackground: var(--todo-title-crossed-bg);\ntransform-origin: 0 0;\ntransform: scaleX(0);\n}\n.todo-item .cbx:hover span:first-child {\nborder-color: var(--accent-color);\n}\n\n.todo-item .inp-cbx:checked + .cbx span:first-child {\nborder-color: var(--accent-color);\nbackground: var(--accent-color);\nanimation: cbx-15 0.6s ease;\n}\n.todo-item .inp-cbx:checked + .cbx span:first-child svg {\nstroke-dashoffset: 0;\n}\n.todo-item .inp-cbx:checked + .cbx span:first-child:before {\ntransform: scale(2.2);\nopacity: 0;\ntransition: all 0.6s ease;\n}\n.todo-item .inp-cbx:checked + .cbx span:last-child {\ncolor: var(--todo-title-crossed-color);\ntransition: all 0.3s ease;\n}\n.todo-item .inp-cbx:checked + .cbx span:last-child:after {\ntransform: scaleX(1);\ntransition: all 0.3s ease;\n}\n\n@keyframes cbx-15 {\n50% {\n    transform: scale(1.2);\n}\n}\n\n\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['@import url(\'https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;600;700&display=swap\');\n\n/* || GLOBAL STYLES */\n\n:root.light {\n    --accent-color: #03A696;\n    --aside-color: #e0ddd1;\n    --aside-hover-color: #dbd9cf;\n    --main-color: #ECE8DD;\n    --text-color: 0, 0, 0;\n    --todo-hover: 0, 0, 0;\n    --todo-btn-hover: #e0dcd1;\n    --priority-low: #36AE7C;\n    --priority-medium: #FF6E31;\n    --priority-high: #EB5353;\n    --todo-title-crossed-color: #bebec2;\n    --todo-title-crossed-bg: #b1b1bb;\n\n}\n:root,\n:root.dark {\n    --accent-color: #03A696;\n    --aside-color: #191919;\n    --aside-hover-color: #353535;\n    --main-color: #161616;\n    --text-color: 255, 255, 255;\n    --todo-hover: 153, 153, 153;\n    --todo-btn-hover: #252525;\n    --priority-low: #36AE7C;\n    --priority-medium: #FF6E31;\n    --priority-high: #EB5353;\n    --todo-title-crossed-color: #464646;\n    --todo-title-crossed-bg: #3d3d3d;\n}\n\n* {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n\n\nbody {\n    color: rgb(var(--text-color), 0.8);\n    width: 100vw;\n    height: 100vh;\n    font-family: \'Open Sans\', sans-serif;\n    overflow: hidden; \n}\n\n\n/* FORM OVERLAY FORM */\n\n.overlay-create-new,\n.overlay-edit,\n.overlay-view-details,\n.overlay-delete-item-dialogue,\n.overlay-add-new-project,\n.overlay-delete-project-dialogue {\n    z-index: 12;\n    position: fixed;\n    top: 0;\n    left: 0;\n    padding: 10px;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgba(0, 0, 0, 0.6);\n    opacity: 0;\n    visibility: hidden;\n    /* display: none; */\n    -webkit-transition: opacity 0.3s 0s, visibility 0s 0.3s;\n    -moz-transition: opacity 0.3s 0s, visibility 0s 0.3s;\n    transition: opacity 0.3s 0s, visibility 0s 0.3s;\n}\n\n.is-visible {\n    opacity: 1;\n    visibility: visible;\n    /* display: flex; */\n    -webkit-transition: opacity 0.3s 0s, visibility 0s 0s;\n    -moz-transition: opacity 0.3s 0s, visibility 0s 0s;\n    transition: opacity 0.3s 0s, visibility 0s 0s;\n}\n\n.overlay-delete-item-dialogue {\n    text-align: center;\n}\n  \nform.create-new, \nform.edit, \n.view-details-container, \n.delete-dialogue-contents,\nform.add-new-project,\n.delete-project-dialogue-contents {\n\n    background-color: var(--aside-color);\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\n    box-sizing: border-box;\n    width: clamp(350px, 50%, 600px);\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    border-radius: 15px;\n    padding: 1rem;\n\n    -webkit-transform: translateY(-40px);\n    -moz-transform: translateY(-40px);\n    -ms-transform: translateY(-40px);\n    -o-transform: translateY(-40px);\n    transform: translateY(-40px);\n    /* Force Hardware Acceleration in WebKit */\n    -webkit-backface-visibility: hidden;\n    backface-visibility: hidden;\n    -webkit-transition-property: -webkit-transform;\n    -moz-transition-property: -moz-transform;\n    transition-property: transform;\n    -webkit-transition-duration: 0.3s;\n    -moz-transition-duration: 0.3s;\n    transition-duration: 0.3s;\n}\n\n.create-new-main, \n.edit-main {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n}\n\n.add-new-project-main {\n    display: flex;\n    flex-direction: column;\n    font-size: 1.2rem;\n}\n\n.create-new-main input,\n.edit-main input {\n    outline: none;\n    font-size: 0.8rem;\n    color: var(--text-color);\n    background-color: var(--aside-color);\n} \n\n.add-new-project input {\n    border: 1px solid rgb(131, 131, 131);\n    border-radius: 8px;\n    padding: 0.5rem;\n    font-size: 1.2rem;\n    color: var(--text-color);\n    background-color: var(--aside-color);\n    margin: 0.5rem 0 1rem 0;\n}\n\n.add-new-project input:focus {\n    outline: none;\n    border: 1px solid var(--accent-color);\n}\n\n.create-new-main input:nth-child(1), .edit-main input:nth-child(1) {\n    font-size: 1.2rem;\n    font-weight: 700;\n}\n\n.create-new-options, .edit-options {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n\n\n\n\n.priority {\n    height: 30px;\n    display: flex;\n    align-items: center;\n    gap: 0.8rem;\n}\n\n.priority-radios {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    /* cursor: pointer; */\n}\n\ninput[type="radio"] {\n    -webkit-appearance: none;\n    appearance: none;\n    /* For iOS < 15 to remove gradient background */\n    background-color: var(--main-color);\n    /* Not removed via appearance */\n    margin: 0;\n    font: inherit;\n    color: currentColor;\n    width: 1.15em;\n    height: 1.15em;\n    border: 0.15em solid currentColor;\n    border-radius: 50%;\n    display: grid;\n    place-content: center;\n    cursor: pointer;\n}\n\ninput[type="radio"]::before {\n    content: "";\n    width: 0.65em;\n    height: 0.65em;\n    border-radius: 50%;\n    transform: scale(0);\n    transition: 120ms transform ease-in-out;\n    box-shadow: inset 1em 1em var(--accent-color);\n}\n\ninput[type="radio"]:checked::before {\n    transform: scale(1);\n}\n\n\n\n#priority-low, #priority-low-edit {\n    border: 0.15em solid var(--priority-low);\n}\n\n#priority-low::before, #priority-low-edit::before {\n    box-shadow: inset 1em 1em var(--priority-low);\n}\n\n#priority-medium, #priority-medium-edit {\n    border: 0.15em solid var(--priority-medium);\n}\n\n#priority-medium::before, #priority-medium-edit::before {\n    box-shadow: inset 1em 1em var(--priority-medium);\n}\n\n#priority-high, #priority-high-edit {\n    border: 0.15em solid var(--priority-high);\n}\n\n#priority-high::before, #priority-high-edit::before {\n    box-shadow: inset 1em 1em var(--priority-high);\n}\n\n.create-new-options-main,\n.create-new-actions,\n.edit-options-main,\n.edit-actions {\n    display: flex;\n    gap: 0.8rem;\n}\n\n.create-new-options-main, .edit-options-main {\n    align-self: flex-end;\n} \n\n.create-new-options button,  \n.create-new-actions button,\n.edit-options button,  \n.edit-actions button {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    font-size: 0.8rem;\n    padding: 0.4rem 0.6rem;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.delete-dialogue-options,\n.delete-project-dialogue-options {\n    display: flex;\n    justify-content: center;\n    gap: 1.2rem;\n}\n\n.delete-project-dialogue-warning {\n    text-align: center;\n}\n\n.delete-project-dialogue-warning p:nth-child(2) {\n    color: var(--priority-high);\n    font-size: 0.8rem;\n    margin-top: 0.8rem;\n}\n\n.add-project-options  {\n    display: flex;\n    justify-content: flex-end;\n    gap: 1rem;\n}\n\n.dialogue-option,\n.add-project-option {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    font-size: 0.8rem;\n    padding: 0.4rem 0.6rem;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n/* .due-date {\n    \n    gap: 5px;\n} */\n\n#new-due-date, #edit-due-date {\n    color: var(--text-color);\n    display: inline-flex;\n    align-items: flex-end;\n    font-size: 0.8rem;\n    outline: none;\n    background-color: transparent;\n    appearance: none;\n    text-transform: uppercase;\n    border: 1px solid var(--accent-color);\n    border-radius: 5px;\n    padding: 0.3rem 0.5rem;\n    user-select: none;\n}\n\ninput::-webkit-datetime-edit-day-field:focus,\ninput::-webkit-datetime-edit-month-field:focus,\ninput::-webkit-datetime-edit-year-field:focus {\n    background-color: var(--accent-color);\n    color: white;\n    outline: none;\n}\n\n.create-new-divider, .edit-divider {\n    width: 100%;\n    height: 1px;\n    background-color: #3b3b3b5b;\n}\n\n.create-new-actions, .edit-actions {\n    align-self: flex-end;\n    font-weight: 600;\n}\n\n.close-view-details {\n    position: absolute;\n    font-size: 1.2rem;\n    right: 14px;\n    top: 14px;\n    cursor: pointer;\n}\n\n.view-details-content {\n    display: flex;\n    flex-direction: column;\n    gap: 1.5rem;\n}\n\n.view-detail{\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.view-detail-priority.high > :first-child {\n    color: var(--priority-high);\n}\n\n.view-detail-priority.medium > :first-child {\n    color: var(--priority-medium);\n}\n\n.view-detail-priority.low > :first-child {\n    color: var(--priority-low);\n}\n\n.confirm-btn {\n    background-color: var(--accent-color);\n    color: rgb(255, 255, 255, 0.8);\n    font-weight: 700;\n}\n\n.confirm-delete-btn {\n    background-color: var(--priority-high);\n    color: rgb(255, 255, 255, 0.8);\n    font-weight: 700;\n}\n\n/* || CONTENTS */\n.contents {\n    height: 100%;\n    display: grid;\n    grid-template-columns: auto 3fr;\n    grid-template-rows: auto 1fr;\n    grid-template-areas: \n    "header header"\n    "nav main";\n    transition: grid-template-columns 0.5s ease-in-out;\n\n}\n\n/* @media screen and (max-width: 700px) {\n    .contents {\n      grid-template-columns: 0 3fr;\n    }\n  } */\n\na {\n    color: inherit;\n    text-decoration: none;\n    pointer-events: none;\n}\n\n/* || HEADER */\n.header {\n    grid-area: header;\n    color: white;\n    height: 50px;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 10px;\n    font-size: 1.3rem;\n    padding: 2rem;\n    background-color: var(--accent-color);\n}\n\n.header-nav {\n    display: flex;\n    gap: 0.625rem;\n}\n\n.header button {\n    color: white;\n    background: none;\n    height: 24px;\n    width: 24px;\n    border-radius: 5px;\n    font-size: 1.4rem;\n    cursor: pointer;\n}\n\n.header button:hover {\n    background: hsla(0,0%,100%,.2);\n}\n\n.header-actions {\n    display: flex;\n    align-items: center;\n    gap: 0.625rem;\n}\n\n\n/* || TOGGLE DARK/LIGHT THEME */\n.toggle-theme input[type="checkbox"] {\nvisibility: hidden;\ndisplay: none;\n}\n\n.toggle-theme *,\n.toggle-theme ::after,\n.toggle-theme ::before {\nbox-sizing: border-box;\n}\n\n/* The switch - the box around the slider */\n.toggle-theme .switch {\n--width-of-switch: 2.5em;\n--height-of-switch: 1.3em;\n/* size of sliding icon -- sun and moon */\n--size-of-icon: 1em;\n/* it is like a inline-padding of switch */\n--slider-offset: 0.3em;\nposition: relative;\nwidth: var(--width-of-switch);\nheight: var(--height-of-switch);\ndisplay: inline-block;\n}\n\n/* The slider */\n.toggle-theme .slider {\nposition: absolute;\ncursor: pointer;\ntop: 0;\nleft: 0;\nright: 0;\nbottom: 0;\n/* background-color: #f4f4f5; */\nbackground-color: var(--aside-color);\ntransition: .4s;\nborder-radius: 30px;\n}\n\n.toggle-theme .slider:before {\nposition: absolute;\ncontent: "";\nheight: var(--size-of-icon,1.4em);\nwidth: var(--size-of-icon,1.4em);\nborder-radius: 20px;\nleft: var(--slider-offset,0.3em);\ntop: 50%;\ntransform: translateY(-50%);\n/* background: linear-gradient(40deg,#ff0080,#ff8c00 70%); */\nbackground-color: var(--accent-color);\ntransition: .4s;\n}\n\n.toggle-theme input:checked + .slider {\n/* background-color: #303136; */\nbackground: var(--aside-color);\n}\n\n.toggle-theme input:checked + .slider:before {\nleft: calc(100% - (var(--size-of-icon,1.4em) + var(--slider-offset,0.3em)));\n/* background: #303136; */\nbackground: var(--aside-color);\n/* change the value of second inset in box-shadow to change the angle and direction of the moon  */\n/* box-shadow: inset -3px -2px 5px -2px #8983f7, inset -10px -4px 0 0 #a3dafb; */\nbox-shadow: inset -3px -2px 5px -2px var(--accent-color), inset -10px -4px 0 0 var(--accent-color);\n\n}\n\n\n/* || ASIDE */\nnav {\n    width: 0;\n    max-width: 250px;\n    grid-area: nav;\n    overflow: auto;\n    overflow-x: hidden;\n    /* transition: all 1s; */\n    transition: all .5s cubic-bezier(0.4, 0, 0.2, 1);\n    /* transition: max-width .5s cubic-bezier(0.4, 0, 0.2, 1); */\n    background-color: var(--aside-color);\n}\n\n/* @media screen and (max-width: 700px) {\n    nav {\n      max-width: 0;\n    }\n  } */\n\n  @media only screen and (max-width: 625px) {\n    nav {\n        position: absolute;\n        top: 64px;\n        height: 100%;\n        z-index: 10;\n    }\n}\n\n.sidebar-content-nav {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 4rem 1rem 1rem;\n}\n\n.side-nav {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    font-size: 1.3rem;\n    padding: 5px;\n    border-radius: 8px;\n    cursor: pointer;\n}\n\n.side-nav:hover,\n.project-item:hover,\n.project-title-container:hover {\n    background-color: var(--aside-hover-color);\n}\n\n.sidebar-content-projects {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 0 1rem 0 1rem;\n}\n\n.project-title-container {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    border-radius: 8px;\n    padding: 0 5px;\n}\n\n.project-title-container .add-project {\n    cursor: pointer;\n    font-size: 1.4rem;\n}\n\n.project-title {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    font-size: 1.2rem;\n}\n\n.project-item {\n    display: grid;\n    grid-template-columns: 1fr 8fr 1fr;\n    align-items: center;\n    gap: 10px;\n    padding: 5px 5px 5px 10px;\n    border-radius: 8px;\n    cursor: pointer;\n}\n\n.project-item:nth-child(1) {\n    display: none;\n}\n\n.project-item-content {\n    width: 90%;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.delete-project {\n    display: flex;\n    justify-self: flex-end;\n    opacity: 0;\n    padding: 0.5rem;\n    transition: opacity 0.3s ease-in-out;\n}\n\n.project-item:hover .delete-project {\n    opacity: 1;\n    transition: all 0.3s ease-in-out;\n}\n\n.dot {\n    height: 13px;\n    width: 13px;\n    background-color: #b6b6b6;\n    border-radius: 50%;\n    flex-shrink: 0;\n}\n\n/* || MAIN */\n.main-container {\n    grid-area: main;\n    max-height: 100%;\n    max-width: 100%;\n    overflow-x: hidden;\n    overflow-y: hidden;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--main-color);\n    padding-bottom: 4rem;\n}\n\n.main h1 {\n    font-weight: 700;\n}\n\n.add-todo {\n    /* width: clamp(300px, 50%, 750px); */\n    width: 150px;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    border-radius: 15px;\n    /* padding-left: 5px; */\n    user-select: none;\n}\n\n.add-todo-text {\n    cursor: pointer;\n}\n\n@media only screen and (max-width: 700px) {\n    .add-todo {\n        width: 130px;\n        flex-direction: column;\n        justify-content: center;\n        padding-bottom: 0.6rem;\n    }\n    \n}\n\n.add-todo-btn, .add-project{\n    color: var(--text-color);\n    margin-top: 7px;\n    background: none;\n    font-size: 2rem;\n    border-radius: 8px;\n    cursor: pointer;\n    transform: translateZ(0) scale(1);\n    transition: transform .2s;\n}\n\n\n.btn-simple-animation:not(:disabled):hover {\n    transform: scale(1.05);\n}\n\n.btn-simple-animation:not(:disabled):hover:active{\n    transform: scale(1.05) translateY(.125rem);\n}\n\n.add-todo:hover {\n    background-color: var(--todo-btn-hover);\n}\n\n\n.btn-simple-animation:focus {\n    outline: 0 solid transparent;\n}\n\n.btn-simple-animation:focus:before {\ncontent: "";\nleft: calc(-1*.375rem);\npointer-events: none;\nposition: absolute;\ntop: calc(-1*.375rem);\ntransition: border-radius;\nuser-select: none;\n}\n\n.btn-simple-animation:focus:not(:focus-visible) {\noutline: 0 solid transparent;\n}\n\n.btn-simple-animation:focus:not(:focus-visible):before {\nborder-width: 0;\n}\n\n.btn-simple-animation:not(:disabled):active {\ntransform: translateY(.125rem);\n}\n\n\n.todo-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    box-sizing: border-box;\n    padding: 4rem 0 0 2rem;\n}\n\n@media only screen and (max-width: 700px) {\n    .todo-container {\n        align-items: center;\n        padding: 4rem 0 0 0;;\n    }\n}\n\n.todo-container h1 {\n    font-size: 2rem;\n}\n\n.todo-list-container {\n    width: 100%;\n    overflow-y: scroll;\n}\n\n.todo-list {\n    max-width: 100%;\n    max-height: 530px;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    padding: 1rem;\n\n}\n\n@media only screen and (max-width: 700px) {\n    .todo-list {\n        /* width: 90%; */\n        align-items: center;\n    }\n\n}\n\n\n@media only screen and (max-height: 835px) {\n    .todo-list{\n        max-height: 400px;\n    }\n\n}\n\n@media only screen and (max-height: 720px) {\n    .todo-list{\n        max-height: 300px;\n    }\n\n}\n\n\n.todo-list-container::-webkit-scrollbar {\n    width: 5px;\n}\n\n.todo-list-container::-webkit-scrollbar-track {\n    background-color: var(--main-color);\n    border-radius: 100px;\n}\n\n.todo-list-container::-webkit-scrollbar-thumb {\n    background-color: var(--accent-color);\n    /* box-shadow: inset 0 0 6px var(--accent-color); */\n    border-radius: 100px;\n}\n\n#default0 {\n    display: none;\n}\n\n.todo-wrapper {\n    width: clamp(350px, 50%, 750px);\n    padding: 1rem 1rem 1rem 1rem;\n    border-radius: 5px;\n    box-shadow: 2px 1px 2px rgb(var(--todo-hover), 0.15);\n    transition: all 0.3s ease-in-out;\n}\n\n@media only screen and (max-width: 700px) {\n    .todo-wrapper {\n        width: clamp(280px, 50%, 750px);\n    }\n}\n\n.todo-wrapper.priority-low {\n    border-left: 3px solid var(--priority-low);\n}\n\n.todo-wrapper.priority-medium {\n    border-left: 3px solid var(--priority-medium);\n}\n\n.todo-wrapper.priority-high {\n    border-left: 3px solid var(--priority-high);\n}\n\n.todo-wrapper:after {\n    opacity: 0;\n    border-radius: 5px;\n    box-shadow: 0 5px 15px rgb(var(--todo-hover), 0.3);\n    transition: opacity 0.3s ease-in-out;\n}\n\n.todo-wrapper:hover {\n    transform: scale(1.02, 1.02);\n}\n\n/* Fade in the pseudo-element with the bigger shadow */\n.todo-wrapper:hover::after {\nopacity: 1;\n}\n\n.todo-item {\n    display: flex;\n    /* flex-direction: column;\n    gap: 1rem; */\n    align-items: center;\n    justify-content: space-between;\n}\n\n@media only screen and (max-width: 700px) {\n    .todo-item {\n        flex-direction: column;\n        gap: 1rem;\n    }\n}\n\n\n\n.todo-item-actions {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.todo-item-actions button {\n    color: var(--text-color);\n    background: none;\n    height: 19px;\n    width: 25px;\n    border-radius: 5px;\n    font-size: 1.1rem;\n    cursor: pointer;\n}\n\n.todo-item-actions button:hover {\n    background: var(--todo-btn-hover);\n}\n\n.todo-item-due-date {\n    font-weight: 500;\n    font-size: 0.8rem;\n}\n\n.todo-item-actions button.item-details {\n    font-size: 0.625rem;\n    font-weight: 700;\n    width: 45px;\n    border: 1px solid rgb(105, 105, 105);\n}\n\n.todo-item-actions button.item-details:hover {\n    background-color: var(--accent-color);\n    color: white;\n}\n\n.todo-item .cbx {\n-webkit-user-select: none;\nuser-select: none;\n-webkit-tap-highlight-color: transparent;\ncursor: pointer;\n}\n.todo-item .cbx span {\ndisplay: inline-block;\nvertical-align: middle;\ntransform: translate3d(0, 0, 0);\n}\n.todo-item .cbx span:first-child {\nposition: relative;\nwidth: 24px;\nheight: 24px;\nborder-radius: 50%;\ntransform: scale(1);\nvertical-align: middle;\nborder: 1px solid #B9B8C3;\ntransition: all 0.2s ease;\n}\n.todo-item .cbx span:first-child svg {\nposition: absolute;\nz-index: 1;\ntop: 8px;\nleft: 6px;\nfill: none;\nstroke: white;\nstroke-width: 2;\nstroke-linecap: round;\nstroke-linejoin: round;\nstroke-dasharray: 16px;\nstroke-dashoffset: 16px;\ntransition: all 0.3s ease;\ntransition-delay: 0.1s;\ntransform: translate3d(0, 0, 0);\n}\n.todo-item .cbx span:first-child:before {\ncontent: "";\nwidth: 100%;\nheight: 100%;\nbackground: #579BB1;\ndisplay: block;\ntransform: scale(0);\nopacity: 1;\nborder-radius: 50%;\ntransition-delay: 0.2s;\n}\n.todo-item .cbx span:last-child {\nmargin-left: 8px;\n}\n.todo-item .cbx span:last-child:after {\ncontent: "";\nposition: absolute;\ntop: 12px;\nleft: 0;\nheight: 1px;\nwidth: 100%;\nbackground: var(--todo-title-crossed-bg);\ntransform-origin: 0 0;\ntransform: scaleX(0);\n}\n.todo-item .cbx:hover span:first-child {\nborder-color: var(--accent-color);\n}\n\n.todo-item .inp-cbx:checked + .cbx span:first-child {\nborder-color: var(--accent-color);\nbackground: var(--accent-color);\nanimation: cbx-15 0.6s ease;\n}\n.todo-item .inp-cbx:checked + .cbx span:first-child svg {\nstroke-dashoffset: 0;\n}\n.todo-item .inp-cbx:checked + .cbx span:first-child:before {\ntransform: scale(2.2);\nopacity: 0;\ntransition: all 0.6s ease;\n}\n.todo-item .inp-cbx:checked + .cbx span:last-child {\ncolor: var(--todo-title-crossed-color);\ntransition: all 0.3s ease;\n}\n.todo-item .inp-cbx:checked + .cbx span:last-child:after {\ntransform: scaleX(1);\ntransition: all 0.3s ease;\n}\n\n@keyframes cbx-15 {\n50% {\n    transform: scale(1.2);\n}\n}\n\n\n'],sourceRoot:""}]);const d=i},3645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var l=this[d][0];null!=l&&(i[l]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),n.push(u))}},n}},7537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},7394:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r},e.exports=n.default},8609:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t]);return e},e.exports=n.default},6420:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return(0,o.default)({},e)};var r,o=(r=t(8609))&&r.__esModule?r:{default:r};e.exports=n.default},7561:(e,n,t)=>{var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var o=((r=t(2512))&&r.__esModule?r:{default:r}).default;n.default=o,e.exports=n.default},8729:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.getDefaultOptions=function(){return t},n.setDefaultOptions=function(e){t=e};var t={}},7100:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=u(t(1603)),o=u(t(1354)),a=u(t(1370)),i=u(t(623)),d=u(t(6226)),l=u(t(7394)),s=u(t(2699));function u(e){return e&&e.__esModule?e:{default:e}}function c(e,n){var t=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),a=r%60;if(0===a)return t+String(o);var i=n||"";return t+String(o)+i+(0,l.default)(a,2)}function A(e,n){return e%60==0?(e>0?"-":"+")+(0,l.default)(Math.abs(e)/60,2):f(e,n)}function f(e,n){var t=n||"",r=e>0?"-":"+",o=Math.abs(e);return r+(0,l.default)(Math.floor(o/60),2)+t+(0,l.default)(o%60,2)}var m={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return s.default.y(e,n)},Y:function(e,n,t,r){var o=(0,d.default)(e,r),a=o>0?o:1-o;if("YY"===n){var i=a%100;return(0,l.default)(i,2)}return"Yo"===n?t.ordinalNumber(a,{unit:"year"}):(0,l.default)(a,n.length)},R:function(e,n){var t=(0,a.default)(e);return(0,l.default)(t,n.length)},u:function(e,n){var t=e.getUTCFullYear();return(0,l.default)(t,n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return(0,l.default)(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return(0,l.default)(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return s.default.M(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return(0,l.default)(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var o=(0,i.default)(e,r);return"wo"===n?t.ordinalNumber(o,{unit:"week"}):(0,l.default)(o,n.length)},I:function(e,n,t){var r=(0,o.default)(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):(0,l.default)(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):s.default.d(e,n)},D:function(e,n,t){var o=(0,r.default)(e);return"Do"===n?t.ordinalNumber(o,{unit:"dayOfYear"}):(0,l.default)(o,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(a);case"ee":return(0,l.default)(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(a);case"cc":return(0,l.default)(a,n.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),o=0===r?7:r;switch(n){case"i":return String(o);case"ii":return(0,l.default)(o,n.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return s.default.h(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):s.default.H(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):(0,l.default)(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):(0,l.default)(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):s.default.m(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):s.default.s(e,n)},S:function(e,n){return s.default.S(e,n)},X:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(n){case"X":return A(o);case"XXXX":case"XX":return f(o);default:return f(o,":")}},x:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return A(o);case"xxxx":case"xx":return f(o);default:return f(o,":")}},O:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+c(o,":");default:return"GMT"+f(o,":")}},z:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+c(o,":");default:return"GMT"+f(o,":")}},t:function(e,n,t,r){var o=r._originalDate||e,a=Math.floor(o.getTime()/1e3);return(0,l.default)(a,n.length)},T:function(e,n,t,r){var o=(r._originalDate||e).getTime();return(0,l.default)(o,n.length)}};n.default=m,e.exports=n.default},2699:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r,o=(r=t(7394))&&r.__esModule?r:{default:r},a={y:function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return(0,o.default)("yy"===n?r%100:r,n.length)},M:function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):(0,o.default)(t+1,2)},d:function(e,n){return(0,o.default)(e.getUTCDate(),n.length)},a:function(e,n){var t=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.toUpperCase();case"aaa":return t;case"aaaaa":return t[0];default:return"am"===t?"a.m.":"p.m."}},h:function(e,n){return(0,o.default)(e.getUTCHours()%12||12,n.length)},H:function(e,n){return(0,o.default)(e.getUTCHours(),n.length)},m:function(e,n){return(0,o.default)(e.getUTCMinutes(),n.length)},s:function(e,n){return(0,o.default)(e.getUTCSeconds(),n.length)},S:function(e,n){var t=n.length,r=e.getUTCMilliseconds(),a=Math.floor(r*Math.pow(10,t-3));return(0,o.default)(a,n.length)}};n.default=a,e.exports=n.default},5209:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=function(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},r=function(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}},o={p:r,P:function(e,n){var o,a=e.match(/(P+)(p+)?/)||[],i=a[1],d=a[2];if(!d)return t(e,n);switch(i){case"P":o=n.dateTime({width:"short"});break;case"PP":o=n.dateTime({width:"medium"});break;case"PPP":o=n.dateTime({width:"long"});break;default:o=n.dateTime({width:"full"})}return o.replace("{{date}}",t(i,n)).replace("{{time}}",r(d,n))}};n.default=o,e.exports=n.default},3561:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()},e.exports=n.default},1603:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){(0,o.default)(1,arguments);var n=(0,r.default)(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var a=n.getTime(),d=t-a;return Math.floor(d/i)+1};var r=a(t(1171)),o=a(t(8734));function a(e){return e&&e.__esModule?e:{default:e}}var i=864e5;e.exports=n.default},1354:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){(0,i.default)(1,arguments);var n=(0,r.default)(e),t=(0,o.default)(n).getTime()-(0,a.default)(n).getTime();return Math.round(t/l)+1};var r=d(t(1171)),o=d(t(79)),a=d(t(4275)),i=d(t(8734));function d(e){return e&&e.__esModule?e:{default:e}}var l=6048e5;e.exports=n.default},1370:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){(0,o.default)(1,arguments);var n=(0,r.default)(e),t=n.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(t+1,0,4),i.setUTCHours(0,0,0,0);var d=(0,a.default)(i),l=new Date(0);l.setUTCFullYear(t,0,4),l.setUTCHours(0,0,0,0);var s=(0,a.default)(l);return n.getTime()>=d.getTime()?t+1:n.getTime()>=s.getTime()?t:t-1};var r=i(t(1171)),o=i(t(8734)),a=i(t(79));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=n.default},623:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){(0,i.default)(1,arguments);var t=(0,r.default)(e),d=(0,o.default)(t,n).getTime()-(0,a.default)(t,n).getTime();return Math.round(d/l)+1};var r=d(t(1171)),o=d(t(9209)),a=d(t(4118)),i=d(t(8734));function d(e){return e&&e.__esModule?e:{default:e}}var l=6048e5;e.exports=n.default},6226:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){var t,l,s,u,c,A,f,m;(0,o.default)(1,arguments);var p=(0,r.default)(e),h=p.getUTCFullYear(),g=(0,d.getDefaultOptions)(),C=(0,i.default)(null!==(t=null!==(l=null!==(s=null!==(u=null==n?void 0:n.firstWeekContainsDate)&&void 0!==u?u:null==n||null===(c=n.locale)||void 0===c||null===(A=c.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==s?s:g.firstWeekContainsDate)&&void 0!==l?l:null===(f=g.locale)||void 0===f||null===(m=f.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==t?t:1);if(!(C>=1&&C<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var v=new Date(0);v.setUTCFullYear(h+1,0,C),v.setUTCHours(0,0,0,0);var b=(0,a.default)(v,n),y=new Date(0);y.setUTCFullYear(h,0,C),y.setUTCHours(0,0,0,0);var w=(0,a.default)(y,n);return p.getTime()>=b.getTime()?h+1:p.getTime()>=w.getTime()?h:h-1};var r=l(t(1171)),o=l(t(8734)),a=l(t(9209)),i=l(t(2084)),d=t(8729);function l(e){return e&&e.__esModule?e:{default:e}}e.exports=n.default},6736:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.isProtectedDayOfYearToken=function(e){return-1!==t.indexOf(e)},n.isProtectedWeekYearToken=function(e){return-1!==r.indexOf(e)},n.throwProtectedError=function(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))};var t=["D","DD"],r=["YY","YYYY"]},8734:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")},e.exports=n.default},79:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){(0,o.default)(1,arguments);var n=1,t=(0,r.default)(e),a=t.getUTCDay(),i=(a<n?7:0)+a-n;return t.setUTCDate(t.getUTCDate()-i),t.setUTCHours(0,0,0,0),t};var r=a(t(1171)),o=a(t(8734));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=n.default},4275:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){(0,a.default)(1,arguments);var n=(0,r.default)(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var i=(0,o.default)(t);return i};var r=i(t(1370)),o=i(t(79)),a=i(t(8734));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=n.default},9209:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){var t,d,l,s,u,c,A,f;(0,o.default)(1,arguments);var m=(0,i.getDefaultOptions)(),p=(0,a.default)(null!==(t=null!==(d=null!==(l=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(u=n.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==l?l:m.weekStartsOn)&&void 0!==d?d:null===(A=m.locale)||void 0===A||null===(f=A.options)||void 0===f?void 0:f.weekStartsOn)&&void 0!==t?t:0);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=(0,r.default)(e),g=h.getUTCDay(),C=(g<p?7:0)+g-p;return h.setUTCDate(h.getUTCDate()-C),h.setUTCHours(0,0,0,0),h};var r=d(t(1171)),o=d(t(8734)),a=d(t(2084)),i=t(8729);function d(e){return e&&e.__esModule?e:{default:e}}e.exports=n.default},4118:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){var t,l,s,u,c,A,f,m;(0,o.default)(1,arguments);var p=(0,d.getDefaultOptions)(),h=(0,i.default)(null!==(t=null!==(l=null!==(s=null!==(u=null==n?void 0:n.firstWeekContainsDate)&&void 0!==u?u:null==n||null===(c=n.locale)||void 0===c||null===(A=c.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==s?s:p.firstWeekContainsDate)&&void 0!==l?l:null===(f=p.locale)||void 0===f||null===(m=f.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==t?t:1),g=(0,r.default)(e,n),C=new Date(0);C.setUTCFullYear(g,0,h),C.setUTCHours(0,0,0,0);var v=(0,a.default)(C,n);return v};var r=l(t(6226)),o=l(t(8734)),a=l(t(9209)),i=l(t(2084)),d=t(8729);function l(e){return e&&e.__esModule?e:{default:e}}e.exports=n.default},2084:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)},e.exports=n.default},5065:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){(0,a.default)(2,arguments);var t=(0,o.default)(e).getTime(),i=(0,r.default)(n);return new Date(t+i)};var r=i(t(2084)),o=i(t(1171)),a=i(t(8734));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=n.default},5616:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n,t){var m,g,C,y,w,B,x,I,k,T,D,M,E,S,j,P,Y,O;(0,c.default)(2,arguments);var _=String(n),U=(0,A.getDefaultOptions)(),q=null!==(m=null!==(g=null==t?void 0:t.locale)&&void 0!==g?g:U.locale)&&void 0!==m?m:f.default,W=(0,u.default)(null!==(C=null!==(y=null!==(w=null!==(B=null==t?void 0:t.firstWeekContainsDate)&&void 0!==B?B:null==t||null===(x=t.locale)||void 0===x||null===(I=x.options)||void 0===I?void 0:I.firstWeekContainsDate)&&void 0!==w?w:U.firstWeekContainsDate)&&void 0!==y?y:null===(k=U.locale)||void 0===k||null===(T=k.options)||void 0===T?void 0:T.firstWeekContainsDate)&&void 0!==C?C:1);if(!(W>=1&&W<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var z=(0,u.default)(null!==(D=null!==(M=null!==(E=null!==(S=null==t?void 0:t.weekStartsOn)&&void 0!==S?S:null==t||null===(j=t.locale)||void 0===j||null===(P=j.options)||void 0===P?void 0:P.weekStartsOn)&&void 0!==E?E:U.weekStartsOn)&&void 0!==M?M:null===(Y=U.locale)||void 0===Y||null===(O=Y.options)||void 0===O?void 0:O.weekStartsOn)&&void 0!==D?D:0);if(!(z>=0&&z<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!q.localize)throw new RangeError("locale must contain localize property");if(!q.formatLong)throw new RangeError("locale must contain formatLong property");var N=(0,a.default)(e);if(!(0,r.default)(N))throw new RangeError("Invalid time value");var L=(0,l.default)(N),F=(0,o.default)(N,L),H={firstWeekContainsDate:W,weekStartsOn:z,locale:q,_originalDate:N},Q=_.match(h).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,d.default[n])(e,q.formatLong):e})).join("").match(p).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return b(r);var a=i.default[o];if(a)return null!=t&&t.useAdditionalWeekYearTokens||!(0,s.isProtectedWeekYearToken)(r)||(0,s.throwProtectedError)(r,n,String(e)),null!=t&&t.useAdditionalDayOfYearTokens||!(0,s.isProtectedDayOfYearToken)(r)||(0,s.throwProtectedError)(r,n,String(e)),a(F,r,q.localize,H);if(o.match(v))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return Q};var r=m(t(9989)),o=m(t(3239)),a=m(t(1171)),i=m(t(7100)),d=m(t(5209)),l=m(t(3561)),s=t(6736),u=m(t(2084)),c=m(t(8734)),A=t(8729),f=m(t(7561));function m(e){return e&&e.__esModule?e:{default:e}}var p=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,h=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,g=/^'([^]*?)'?$/,C=/''/g,v=/[a-zA-Z]/;function b(e){var n=e.match(g);return n?n[1].replace(C,"'"):e}e.exports=n.default},2382:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return(0,o.default)(1,arguments),e instanceof Date||"object"===a(e)&&"[object Date]"===Object.prototype.toString.call(e)};var r,o=(r=t(8734))&&r.__esModule?r:{default:r};function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}e.exports=n.default},9989:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){if((0,a.default)(1,arguments),!(0,r.default)(e)&&"number"!=typeof e)return!1;var n=(0,o.default)(e);return!isNaN(Number(n))};var r=i(t(2382)),o=i(t(1171)),a=i(t(8734));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=n.default},289:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,r=e.formats[t]||e.formats[e.defaultWidth];return r}},e.exports=n.default},6245:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return function(n,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,a=null!=t&&t.width?String(t.width):o;r=e.formattingValues[a]||e.formattingValues[o]}else{var i=e.defaultWidth,d=null!=t&&t.width?String(t.width):e.defaultWidth;r=e.values[d]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(n):n]}},e.exports=n.default},3421:(e,n)=>{function t(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function r(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return function(n){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=o.width,i=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],d=n.match(i);if(!d)return null;var l,s=d[0],u=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(u)?r(u,(function(e){return e.test(s)})):t(u,(function(e){return e.test(s)}));l=e.valueCallback?e.valueCallback(c):c,l=o.valueCallback?o.valueCallback(l):l;var A=n.slice(s.length);return{value:l,rest:A}}},e.exports=n.default},8926:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.match(e.matchPattern);if(!r)return null;var o=r[0],a=n.match(e.parsePattern);if(!a)return null;var i=e.valueCallback?e.valueCallback(a[0]):a[0];i=t.valueCallback?t.valueCallback(i):i;var d=n.slice(o.length);return{value:i,rest:d}}},e.exports=n.default},1924:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};n.default=function(e,n,r){var o,a=t[e];return o="string"==typeof a?a:1===n?a.one:a.other.replace("{{count}}",n.toString()),null!=r&&r.addSuffix?r.comparison&&r.comparison>0?"in "+o:o+" ago":o},e.exports=n.default},5062:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r,o=(r=t(289))&&r.__esModule?r:{default:r},a={date:(0,o.default)({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:(0,o.default)({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:(0,o.default)({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};n.default=a,e.exports=n.default},5102:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};n.default=function(e,n,r,o){return t[e]},e.exports=n.default},7839:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r,o=(r=t(6245))&&r.__esModule?r:{default:r},a={ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:(0,o.default)({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:(0,o.default)({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:(0,o.default)({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:(0,o.default)({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:(0,o.default)({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};n.default=a,e.exports=n.default},9796:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=o(t(3421));function o(e){return e&&e.__esModule?e:{default:e}}var a={ordinalNumber:(0,o(t(8926)).default)({matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}}),era:(0,r.default)({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:(0,r.default)({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:(0,r.default)({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:(0,r.default)({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:(0,r.default)({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};n.default=a,e.exports=n.default},2512:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=l(t(1924)),o=l(t(5062)),a=l(t(5102)),i=l(t(7839)),d=l(t(9796));function l(e){return e&&e.__esModule?e:{default:e}}var s={code:"en-US",formatDistance:r.default,formatLong:o.default,formatRelative:a.default,localize:i.default,match:d.default,options:{weekStartsOn:0,firstWeekContainsDate:1}};n.default=s,e.exports=n.default},3239:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){(0,o.default)(2,arguments);var t=(0,a.default)(n);return(0,r.default)(e,-t)};var r=i(t(5065)),o=i(t(8734)),a=i(t(2084));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=n.default},1171:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){(0,o.default)(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===a(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))};var r,o=(r=t(8734))&&r.__esModule?r:{default:r};function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}e.exports=n.default},3379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],d=0;d<e.length;d++){var l=e[d],s=r.base?l[0]+r.base:l[0],u=a[s]||0,c="".concat(s," ").concat(u);a[s]=u+1;var A=t(c),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)n[A].references++,n[A].updater(f);else{var m=o(f,r);r.byIndex=d,n.splice(d,0,{identifier:c,updater:m,references:1})}i.push(c)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var d=t(a[i]);n[d].references--}for(var l=r(e,o),s=0;s<a.length;s++){var u=t(a[s]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},9216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},3565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},7795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},4589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},5721:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n,t,r,o,a,i){var d=new Date(0);return d.setUTCFullYear(e,n,t),d.setUTCHours(r,o,a,i),d},e.exports=n.default},5855:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n,t){var r=function(e,n,t){if(t&&!t.code)throw new Error("date-fns-tz error: Please set a language code on the locale object imported from date-fns, e.g. `locale.code = 'en-US'`");return new Intl.DateTimeFormat(t?[t.code,"en-US"]:void 0,{timeZone:n,timeZoneName:e})}(e,t.timeZone,t.locale);return r.formatToParts?function(e,n){for(var t=e.formatToParts(n),r=t.length-1;r>=0;--r)if("timeZoneName"===t[r].type)return t[r].value}(r,n):function(e,n){var t=e.format(n).replace(/\u200E/g,""),r=/ [\w-+ ]+$/.exec(t);return r?r[0].substr(1):""}(r,n)},e.exports=n.default},2734:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n,t){var r,a,c;if(""===e)return 0;if(r=d.timezoneZ.exec(e))return 0;if(r=d.timezoneHH.exec(e))return s(c=parseInt(r[1],10))?-c*i:NaN;if(r=d.timezoneHHMM.exec(e)){c=parseInt(r[1],10);var A=parseInt(r[2],10);return s(c,A)?(a=Math.abs(c)*i+6e4*A,c>0?-a:a):NaN}if(function(e){if(u[e])return!0;try{return new Intl.DateTimeFormat(void 0,{timeZone:e}),u[e]=!0,!0}catch(e){return!1}}(e)){n=new Date(n||Date.now());var f=t?n:function(e){return(0,o.default)(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds())}(n),m=l(f,e),p=t?m:function(e,n,t){var r=e.getTime()-n,o=l(new Date(r),t);if(n===o)return n;r-=o-n;var a=l(new Date(r),t);return o===a?o:Math.max(o,a)}(n,m,e);return-p}return NaN};var r=a(t(2712)),o=a(t(5721));function a(e){return e&&e.__esModule?e:{default:e}}var i=36e5,d={timezone:/([Z+-].*)$/,timezoneZ:/^(Z)$/,timezoneHH:/^([+-]\d{2})$/,timezoneHHMM:/^([+-]\d{2}):?(\d{2})$/};function l(e,n){var t=(0,r.default)(e,n),a=(0,o.default)(t[0],t[1]-1,t[2],t[3]%24,t[4],t[5],0).getTime(),i=e.getTime(),d=i%1e3;return a-(i-(d>=0?d:1e3+d))}function s(e,n){return-23<=e&&e<=23&&(null==n||0<=n&&n<=59)}var u={};e.exports=n.default},7048:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=/(Z|[+-]\d{2}(?::?\d{2})?| UTC| [a-zA-Z]+\/[a-zA-Z_]+(?:\/[a-zA-Z_]+)?)$/,e.exports=n.default},2712:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){var o=function(e){if(!r[e]){var n=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:"America/New_York",year:"numeric",month:"numeric",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"}).format(new Date("2014-06-25T04:00:00.123Z")),t="06/25/2014, 00:00:00"===n||"‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00"===n;r[e]=t?new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:e,year:"numeric",month:"numeric",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"}):new Intl.DateTimeFormat("en-US",{hourCycle:"h23",timeZone:e,year:"numeric",month:"numeric",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"})}return r[e]}(n);return o.formatToParts?function(e,n){try{for(var r=e.formatToParts(n),o=[],a=0;a<r.length;a++){var i=t[r[a].type];i>=0&&(o[i]=parseInt(r[a].value,10))}return o}catch(e){if(e instanceof RangeError)return[NaN];throw e}}(o,e):function(e,n){var t=e.format(n).replace(/\u200E/g,""),r=/(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(t);return[r[3],r[1],r[2],r[4],r[5],r[6]]}(o,e)};var t={year:0,month:1,day:2,hour:3,minute:4,second:5},r={};e.exports=n.default},3826:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=a(t(5855)),o=a(t(2734));function a(e){return e&&e.__esModule?e:{default:e}}function i(e,n){var t=e?(0,o.default)(e,n,!0)/6e4:n.getTimezoneOffset();if(Number.isNaN(t))throw new RangeError("Invalid time zone specified: "+e);return t}function d(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}function l(e,n){var t=n||"",r=e>0?"-":"+",o=Math.abs(e);return r+d(Math.floor(o/60),2)+t+d(Math.floor(o%60),2)}function s(e,n){return e%60==0?(e>0?"-":"+")+d(Math.abs(e)/60,2):l(e,n)}var u={X:function(e,n,t,r){var o=i(r.timeZone,r._originalDate||e);if(0===o)return"Z";switch(n){case"X":return s(o);case"XXXX":case"XX":return l(o);default:return l(o,":")}},x:function(e,n,t,r){var o=i(r.timeZone,r._originalDate||e);switch(n){case"x":return s(o);case"xxxx":case"xx":return l(o);default:return l(o,":")}},O:function(e,n,t,r){var o=i(r.timeZone,r._originalDate||e);switch(n){case"O":case"OO":case"OOO":return"GMT"+function(e,n){var t=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),a=r%60;if(0===a)return t+String(o);return t+String(o)+":"+d(a,2)}(o);default:return"GMT"+l(o,":")}},z:function(e,n,t,o){var a=o._originalDate||e;switch(n){case"z":case"zz":case"zzz":return(0,r.default)("short",a,o);default:return(0,r.default)("long",a,o)}}};n.default=u,e.exports=n.default},6558:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n,t){var i=String(n),l=t||{},s=i.match(d);if(s){var u=(0,a.default)(e,l);i=s.reduce((function(e,n){if("'"===n[0])return e;var t=e.indexOf(n),r="'"===e[t-1],a=e.replace(n,"'"+o.default[n[0]](u,n,null,l)+"'");return r?a.substring(0,t-1)+a.substring(t+1):a}),i)}return(0,r.default)(e,i,l)};var r=i(t(5616)),o=i(t(3826)),a=i(t(1476));function i(e){return e&&e.__esModule?e:{default:e}}var d=/([xXOz]+)|''|'(''|[^'])+('|$)/g;e.exports=n.default},6645:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n,t,i){var d=(0,r.default)(i);return d.timeZone=n,(0,o.default)((0,a.default)(e,n),t,d)};var r=i(t(6420)),o=i(t(6558)),a=i(t(1132));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=n.default},4992:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){return-(0,o.default)(e,n)};var r,o=(r=t(2734))&&r.__esModule?r:{default:r};e.exports=n.default},722:(e,n,t)=>{e.exports={format:t(6558),formatInTimeZone:t(6645),getTimezoneOffset:t(4992),toDate:t(1476),utcToZonedTime:t(1132),zonedTimeToUtc:t(8516)}},1476:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){if(arguments.length<1)throw new TypeError("1 argument required, but only "+arguments.length+" present");if(null===e)return new Date(NaN);var t=n||{},i=null==t.additionalDigits?2:(0,r.default)(t.additionalDigits);if(2!==i&&1!==i&&0!==i)throw new RangeError("additionalDigits must be 0, 1 or 2");if(e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e))return new Date(e.getTime());if("number"==typeof e||"[object Number]"===Object.prototype.toString.call(e))return new Date(e);if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var d=u(e),l=c(d.date,i),s=l.year,m=l.restDateString,p=A(m,s);if(isNaN(p))return new Date(NaN);if(p){var h,g=p.getTime(),C=0;if(d.time&&(C=f(d.time),isNaN(C)))return new Date(NaN);if(d.timeZone||t.timeZone){if(h=(0,a.default)(d.timeZone||t.timeZone,new Date(g+C)),isNaN(h))return new Date(NaN)}else h=(0,o.default)(new Date(g+C)),h=(0,o.default)(new Date(g+C+h));return new Date(g+C+h)}return new Date(NaN)};var r=d(t(2084)),o=d(t(3561)),a=d(t(2734)),i=d(t(7048));function d(e){return e&&e.__esModule?e:{default:e}}var l=36e5,s={dateTimePattern:/^([0-9W+-]+)(T| )(.*)/,datePattern:/^([0-9W+-]+)(.*)/,plainTime:/:/,YY:/^(\d{2})$/,YYY:[/^([+-]\d{2})$/,/^([+-]\d{3})$/,/^([+-]\d{4})$/],YYYY:/^(\d{4})/,YYYYY:[/^([+-]\d{4})/,/^([+-]\d{5})/,/^([+-]\d{6})/],MM:/^-(\d{2})$/,DDD:/^-?(\d{3})$/,MMDD:/^-?(\d{2})-?(\d{2})$/,Www:/^-?W(\d{2})$/,WwwD:/^-?W(\d{2})-?(\d{1})$/,HH:/^(\d{2}([.,]\d*)?)$/,HHMM:/^(\d{2}):?(\d{2}([.,]\d*)?)$/,HHMMSS:/^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,timeZone:i.default};function u(e){var n,t={},r=s.dateTimePattern.exec(e);if(r?(t.date=r[1],n=r[3]):(r=s.datePattern.exec(e))?(t.date=r[1],n=r[2]):(t.date=null,n=e),n){var o=s.timeZone.exec(n);o?(t.time=n.replace(o[1],""),t.timeZone=o[1].trim()):t.time=n}return t}function c(e,n){var t,r=s.YYY[n],o=s.YYYYY[n];if(t=s.YYYY.exec(e)||o.exec(e)){var a=t[1];return{year:parseInt(a,10),restDateString:e.slice(a.length)}}if(t=s.YY.exec(e)||r.exec(e)){var i=t[1];return{year:100*parseInt(i,10),restDateString:e.slice(i.length)}}return{year:null}}function A(e,n){if(null===n)return null;var t,r,o,a;if(0===e.length)return(r=new Date(0)).setUTCFullYear(n),r;if(t=s.MM.exec(e))return r=new Date(0),C(n,o=parseInt(t[1],10)-1)?(r.setUTCFullYear(n,o),r):new Date(NaN);if(t=s.DDD.exec(e)){r=new Date(0);var i=parseInt(t[1],10);return function(e,n){if(n<1)return!1;var t=g(e);return!(t&&n>366)&&!(!t&&n>365)}(n,i)?(r.setUTCFullYear(n,0,i),r):new Date(NaN)}if(t=s.MMDD.exec(e)){r=new Date(0),o=parseInt(t[1],10)-1;var d=parseInt(t[2],10);return C(n,o,d)?(r.setUTCFullYear(n,o,d),r):new Date(NaN)}if(t=s.Www.exec(e))return v(0,a=parseInt(t[1],10)-1)?m(n,a):new Date(NaN);if(t=s.WwwD.exec(e)){a=parseInt(t[1],10)-1;var l=parseInt(t[2],10)-1;return v(0,a,l)?m(n,a,l):new Date(NaN)}return null}function f(e){var n,t,r;if(n=s.HH.exec(e))return b(t=parseFloat(n[1].replace(",",".")))?t%24*l:NaN;if(n=s.HHMM.exec(e))return b(t=parseInt(n[1],10),r=parseFloat(n[2].replace(",",".")))?t%24*l+6e4*r:NaN;if(n=s.HHMMSS.exec(e)){t=parseInt(n[1],10),r=parseInt(n[2],10);var o=parseFloat(n[3].replace(",","."));return b(t,r,o)?t%24*l+6e4*r+1e3*o:NaN}return null}function m(e,n,t){n=n||0,t=t||0;var r=new Date(0);r.setUTCFullYear(e,0,4);var o=7*n+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}var p=[31,28,31,30,31,30,31,31,30,31,30,31],h=[31,29,31,30,31,30,31,31,30,31,30,31];function g(e){return e%400==0||e%4==0&&e%100!=0}function C(e,n,t){if(n<0||n>11)return!1;if(null!=t){if(t<1)return!1;var r=g(e);if(r&&t>h[n])return!1;if(!r&&t>p[n])return!1}return!0}function v(e,n,t){return!(n<0||n>52||null!=t&&(t<0||t>6))}function b(e,n,t){return!(null!=e&&(e<0||e>=25)||null!=n&&(n<0||n>=60)||null!=t&&(t<0||t>=60))}e.exports=n.default},1132:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n,t){var a=(0,o.default)(e,t),i=(0,r.default)(n,a,!0),d=new Date(a.getTime()-i),l=new Date(0);return l.setFullYear(d.getUTCFullYear(),d.getUTCMonth(),d.getUTCDate()),l.setHours(d.getUTCHours(),d.getUTCMinutes(),d.getUTCSeconds(),d.getUTCMilliseconds()),l};var r=a(t(2734)),o=a(t(1476));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=n.default},8516:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n,t){if("string"==typeof e&&!e.match(a.default)){var l=(0,r.default)(t);return l.timeZone=n,(0,o.default)(e,l)}var s=(0,o.default)(e,t),u=(0,d.default)(s.getFullYear(),s.getMonth(),s.getDate(),s.getHours(),s.getMinutes(),s.getSeconds(),s.getMilliseconds()).getTime(),c=(0,i.default)(n,new Date(u));return new Date(u+c)};var r=l(t(6420)),o=l(t(1476)),a=l(t(7048)),i=l(t(2734)),d=l(t(5721));function l(e){return e&&e.__esModule?e:{default:e}}e.exports=n.default}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0;var r={};(()=>{t.d(r,{E:()=>rn,K:()=>tn});var e=t(3379),n=t.n(e),o=t(7795),a=t.n(o),i=t(569),d=t.n(i),l=t(3565),s=t.n(l),u=t(9216),c=t.n(u),A=t(4589),f=t.n(A),m=t(5426),p={};function h(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function C(e){return h(1,arguments),e instanceof Date||"object"===g(e)&&"[object Date]"===Object.prototype.toString.call(e)}function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function b(e){h(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===v(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function y(e){if(h(1,arguments),!C(e)&&"number"!=typeof e)return!1;var n=b(e);return!isNaN(Number(n))}function w(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function B(e,n){h(2,arguments);var t=b(e).getTime(),r=w(n);return new Date(t+r)}function x(e,n){h(2,arguments);var t=w(n);return B(e,-t)}p.styleTagTransform=f(),p.setAttributes=s(),p.insert=d().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=c(),n()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;var I=864e5;function k(e){h(1,arguments);var n=1,t=b(e),r=t.getUTCDay(),o=(r<n?7:0)+r-n;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function T(e){h(1,arguments);var n=b(e),t=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=k(r),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=k(a);return n.getTime()>=o.getTime()?t+1:n.getTime()>=i.getTime()?t:t-1}function D(e){h(1,arguments);var n=T(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var r=k(t);return r}var M=6048e5,E={};function S(){return E}function j(e,n){var t,r,o,a,i,d,l,s;h(1,arguments);var u=S(),c=w(null!==(t=null!==(r=null!==(o=null!==(a=null==n?void 0:n.weekStartsOn)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:u.weekStartsOn)&&void 0!==r?r:null===(l=u.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==t?t:0);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=b(e),f=A.getUTCDay(),m=(f<c?7:0)+f-c;return A.setUTCDate(A.getUTCDate()-m),A.setUTCHours(0,0,0,0),A}function P(e,n){var t,r,o,a,i,d,l,s;h(1,arguments);var u=b(e),c=u.getUTCFullYear(),A=S(),f=w(null!==(t=null!==(r=null!==(o=null!==(a=null==n?void 0:n.firstWeekContainsDate)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==r?r:null===(l=A.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==t?t:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(c+1,0,f),m.setUTCHours(0,0,0,0);var p=j(m,n),g=new Date(0);g.setUTCFullYear(c,0,f),g.setUTCHours(0,0,0,0);var C=j(g,n);return u.getTime()>=p.getTime()?c+1:u.getTime()>=C.getTime()?c:c-1}function Y(e,n){var t,r,o,a,i,d,l,s;h(1,arguments);var u=S(),c=w(null!==(t=null!==(r=null!==(o=null!==(a=null==n?void 0:n.firstWeekContainsDate)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==r?r:null===(l=u.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==t?t:1),A=P(e,n),f=new Date(0);f.setUTCFullYear(A,0,c),f.setUTCHours(0,0,0,0);var m=j(f,n);return m}var O=6048e5;function _(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}const U=function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return _("yy"===n?r%100:r,n.length)},q=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):_(t+1,2)},W=function(e,n){return _(e.getUTCDate(),n.length)},z=function(e,n){return _(e.getUTCHours()%12||12,n.length)},N=function(e,n){return _(e.getUTCHours(),n.length)},L=function(e,n){return _(e.getUTCMinutes(),n.length)},F=function(e,n){return _(e.getUTCSeconds(),n.length)},H=function(e,n){var t=n.length,r=e.getUTCMilliseconds();return _(Math.floor(r*Math.pow(10,t-3)),n.length)};var Q={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return U(e,n)},Y:function(e,n,t,r){var o=P(e,r),a=o>0?o:1-o;return"YY"===n?_(a%100,2):"Yo"===n?t.ordinalNumber(a,{unit:"year"}):_(a,n.length)},R:function(e,n){return _(T(e),n.length)},u:function(e,n){return _(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return _(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return _(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return q(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return _(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var o=function(e,n){h(1,arguments);var t=b(e),r=j(t,n).getTime()-Y(t,n).getTime();return Math.round(r/O)+1}(e,r);return"wo"===n?t.ordinalNumber(o,{unit:"week"}):_(o,n.length)},I:function(e,n,t){var r=function(e){h(1,arguments);var n=b(e),t=k(n).getTime()-D(n).getTime();return Math.round(t/M)+1}(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):_(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):W(e,n)},D:function(e,n,t){var r=function(e){h(1,arguments);var n=b(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=n.getTime(),o=t-r;return Math.floor(o/I)+1}(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):_(r,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(a);case"ee":return _(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(a);case"cc":return _(a,n.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),o=0===r?7:r;switch(n){case"i":return String(o);case"ii":return _(o,n.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return z(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):N(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):_(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):_(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):L(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):F(e,n)},S:function(e,n){return H(e,n)},X:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(n){case"X":return G(o);case"XXXX":case"XX":return X(o);default:return X(o,":")}},x:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return G(o);case"xxxx":case"xx":return X(o);default:return X(o,":")}},O:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+Z(o,":");default:return"GMT"+X(o,":")}},z:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+Z(o,":");default:return"GMT"+X(o,":")}},t:function(e,n,t,r){var o=r._originalDate||e;return _(Math.floor(o.getTime()/1e3),n.length)},T:function(e,n,t,r){return _((r._originalDate||e).getTime(),n.length)}};function Z(e,n){var t=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),a=r%60;if(0===a)return t+String(o);var i=n||"";return t+String(o)+i+_(a,2)}function G(e,n){return e%60==0?(e>0?"-":"+")+_(Math.abs(e)/60,2):X(e,n)}function X(e,n){var t=n||"",r=e>0?"-":"+",o=Math.abs(e);return r+_(Math.floor(o/60),2)+t+_(o%60,2)}const R=Q;var J=function(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},$=function(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}};const V={p:$,P:function(e,n){var t,r=e.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return J(e,n);switch(o){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",J(o,n)).replace("{{time}}",$(a,n))}};function K(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var ee=["D","DD"],ne=["YY","YYYY"];function te(e){return-1!==ee.indexOf(e)}function re(e){return-1!==ne.indexOf(e)}function oe(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var ae={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function ie(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,r=e.formats[t]||e.formats[e.defaultWidth];return r}}const de={date:ie({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:ie({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:ie({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var le={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function se(e){return function(n,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,a=null!=t&&t.width?String(t.width):o;r=e.formattingValues[a]||e.formattingValues[o]}else{var i=e.defaultWidth,d=null!=t&&t.width?String(t.width):e.defaultWidth;r=e.values[d]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(n):n]}}const ue={ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:se({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:se({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:se({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:se({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:se({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function ce(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],a=n.match(o);if(!a)return null;var i,d=a[0],l=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],s=Array.isArray(l)?fe(l,(function(e){return e.test(d)})):Ae(l,(function(e){return e.test(d)}));i=e.valueCallback?e.valueCallback(s):s,i=t.valueCallback?t.valueCallback(i):i;var u=n.slice(d.length);return{value:i,rest:u}}}function Ae(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function fe(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}var me,pe={ordinalNumber:(me={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(me.matchPattern);if(!t)return null;var r=t[0],o=e.match(me.parsePattern);if(!o)return null;var a=me.valueCallback?me.valueCallback(o[0]):o[0];a=n.valueCallback?n.valueCallback(a):a;var i=e.slice(r.length);return{value:a,rest:i}}),era:ce({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:ce({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:ce({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:ce({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:ce({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const he={code:"en-US",formatDistance:function(e,n,t){var r,o=ae[e];return r="string"==typeof o?o:1===n?o.one:o.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:de,formatRelative:function(e,n,t,r){return le[e]},localize:ue,match:pe,options:{weekStartsOn:0,firstWeekContainsDate:1}};var ge=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ce=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ve=/^'([^]*?)'?$/,be=/''/g,ye=/[a-zA-Z]/;function we(e,n,t){var r,o,a,i,d,l,s,u,c,A,f,m,p,g,C,v,B,I;h(2,arguments);var k=String(n),T=S(),D=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:T.locale)&&void 0!==r?r:he,M=w(null!==(a=null!==(i=null!==(d=null!==(l=null==t?void 0:t.firstWeekContainsDate)&&void 0!==l?l:null==t||null===(s=t.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==d?d:T.firstWeekContainsDate)&&void 0!==i?i:null===(c=T.locale)||void 0===c||null===(A=c.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(M>=1&&M<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var E=w(null!==(f=null!==(m=null!==(p=null!==(g=null==t?void 0:t.weekStartsOn)&&void 0!==g?g:null==t||null===(C=t.locale)||void 0===C||null===(v=C.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==p?p:T.weekStartsOn)&&void 0!==m?m:null===(B=T.locale)||void 0===B||null===(I=B.options)||void 0===I?void 0:I.weekStartsOn)&&void 0!==f?f:0);if(!(E>=0&&E<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!D.localize)throw new RangeError("locale must contain localize property");if(!D.formatLong)throw new RangeError("locale must contain formatLong property");var j=b(e);if(!y(j))throw new RangeError("Invalid time value");var P=K(j),Y=x(j,P),O={firstWeekContainsDate:M,weekStartsOn:E,locale:D,_originalDate:j},_=k.match(Ce).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,V[n])(e,D.formatLong):e})).join("").match(ge).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return Be(r);var a=R[o];if(a)return null!=t&&t.useAdditionalWeekYearTokens||!re(r)||oe(r,n,String(e)),null!=t&&t.useAdditionalDayOfYearTokens||!te(r)||oe(r,n,String(e)),a(Y,r,D.localize,O);if(o.match(ye))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return _}function Be(e){var n=e.match(ve);return n?n[1].replace(be,"'"):e}var xe=t(722);const Ie=document.querySelector(".main-title"),ke=document.querySelector(".todo-list"),Te=document.getElementById("default0"),De=document.querySelector(".project-item");document.querySelector(".delete-project").addEventListener("click",(e=>{Oe.openDeleteProjectDialogue()}));const Me=(e,n)=>{console.log(n);for(let t of n)t.project!==e&&"All"!==e||Se(t.id,t.title,t.desc,t.priority,t.dueDate,t.dateCreated,t.project,t.completed)},Ee=(e,n)=>{let t=n;const r=document.querySelector(".project-items"),o=De.cloneNode(!0);o.dataset.project=e;let a=o.children[1],i=o.lastElementChild;i.addEventListener("click",(n=>{console.log("hey");let r=i.parentNode;r.dataset.project.at(-1),console.log(r),Oe.openDeleteProjectDialogue(e,t)})),a.innerText=t,r.appendChild(o)},Se=(e,n,t,r,o,a,i,d)=>{const l=document.querySelector(".todo-list"),s=Te.cloneNode(!0),u=s.firstElementChild.firstElementChild.lastElementChild.lastElementChild,c=s.firstElementChild.firstElementChild.firstElementChild,A=s.firstElementChild.firstElementChild.lastElementChild,f=s.firstElementChild.lastElementChild.children,m=f[1],p=f[0],h=f[3],g=f[2];let C=We.getDefaultTaskList();r=C.find((n=>n.id===e)).priority,Pe(s,r),s.dataset.task="todo"+e,s.id="todo"+e,Number(s.id.at(-1)),A.htmlFor="cbx"+e,c.id="cbx"+e,(d=C.find((n=>n.id===e)).completed)?c.checked=!0:d||(c.checked=!1);let v=C.find((n=>n.id===e));c.addEventListener("click",(e=>{c.checked?(v.completed=!0,console.log(C),tn(C)):(v.completed=!1,console.log("change"),tn(C),console.log(C))})),u.innerText=n;let b=je(o);p.innerText=b;let y=We.getDefaultTaskList().find((n=>n.id===e)).desc;return m.addEventListener("click",(n=>{Oe.editItem(n,e,u.innerText,y,r,o)})),h.addEventListener("click",(n=>{Oe.viewDetails(n,e)})),g.addEventListener("click",(n=>{Oe.openDeleteItemDialogue(e)})),l.appendChild(s),s},je=e=>{let n=(0,xe.utcToZonedTime)(e,"UTC");return we(new Date(n),"MMM do")},Pe=(e,n,t,r,o)=>{t&&r&&o||(t="priority-high",r="priority-medium",o="priority-low"),"priority-medium"===n?(e.classList.remove(o),e.classList.remove(t),e.classList.add(r)):"priority-low"===n?(e.classList.remove(r),e.classList.remove(t),e.classList.add(o)):"priority-high"===n&&(e.classList.remove(r),e.classList.remove(o),e.classList.add(t))},Ye=document.querySelectorAll('input[name="radio"]'),Oe=(()=>{const e=document.querySelector(".overlay-create-new"),n=document.querySelector(".overlay-edit"),t=document.querySelector(".create-new"),r=document.querySelector('form[class="edit"]'),o=document.querySelector(".add-todo-btn"),a=document.querySelector(".add-todo-text"),i=document.querySelectorAll(".cancel-form-btn"),d=(document.querySelector('button[class="form-btn add-task"]'),document.querySelector(".priority-radios"),document.querySelectorAll(".close-view-details")),l=document.querySelector('input[id="name"]'),s=document.querySelector('input[id="description"]'),u=document.querySelector("#new-due-date"),c=document.querySelector('input[id="name-edit"]'),A=document.querySelector('input[id="description-edit"]'),f=document.querySelector("#edit-due-date"),m=document.querySelectorAll('input[name="radio-edit"]'),p=document.querySelector(".overlay-view-details"),g=document.querySelector(".view-title"),C=document.querySelector(".view-desc"),v=document.querySelector(".view-priority"),y=document.querySelector(".view-project-title"),w=document.querySelector(".view-due-date"),B=document.querySelector(".view-date-created"),x=document.querySelector(".view-detail-priority"),I=document.querySelector(".cancel-dialogue-option"),k=document.querySelector(".delete-dialogue-option"),T=document.querySelector(".overlay-delete-item-dialogue"),D=document.querySelector(".overlay-add-new-project"),M=document.querySelector(".cancel-project-btn"),E=document.querySelector(".add-project"),S=document.querySelector(".add-new-project"),j=document.querySelector('input[id="new-project-name"]'),P=document.querySelector(".cancel-project-dialogue-option"),Y=document.querySelector(".delete-project-dialogue-option"),O=document.querySelector(".overlay-delete-project-dialogue"),_=()=>{e.classList.add("is-visible")},U=()=>{e.classList.remove("is-visible"),t.reset()},q=()=>{n.classList.remove("is-visible"),r.reset()},W=()=>{T.classList.remove("is-visible")},z=()=>{D.classList.remove("is-visible"),S.reset()},N=()=>{O.classList.remove("is-visible")};let L,F,H,Q,Z;const G=e=>("priority-low"===e?m[0].checked=!0:"priority-medium"===e?m[1].checked=!0:"priority-high"===e&&(m[2].checked=!0),e),X=e=>{let n;return[...e].forEach((e=>{e.checked&&("priority-low"===e.id||"priority-low-edit"===e.id?n="priority-low":"priority-medium"===e.id||"priority-medium-edit"===e.id?n="priority-medium":"priority-high"!==e.id&&"priority-high-edit"!==e.id||(n="priority-high"))})),n};X(Ye),o.addEventListener("click",(e=>{_(),R()})),a.addEventListener("click",(e=>{_(),R()})),E.addEventListener("click",(e=>{D.classList.add("is-visible"),j.focus()})),I.addEventListener("click",(e=>{W()})),k.addEventListener("click",(e=>{(e=>{e=H;let n=We.getDefaultTaskList(),t=n.indexOf(n.find((n=>n.id===e)));We.removeTask(t),document.getElementById(`todo${e}`).remove(),console.log(We.getDefaultTaskList()),W(),tn(We.getDefaultTaskList())})()})),M.addEventListener("click",(e=>{z()})),P.addEventListener("click",(e=>{N()})),Y.addEventListener("click",(e=>{((e,n)=>{e=Q,n=Z,console.log(n);let t=We.getDefaultTaskList();for(console.log(t),t.forEach((e=>{if(e.project===n){console.log(e);let n=t.indexOf(t.find((n=>n.id===e.id)));We.removeTask(n),tn(We.getDefaultTaskList()),console.log(We.getDefaultTaskList())}})),Ie.innerText="Today";ke.hasChildNodes();)ke.removeChild(ke.firstChild);Me("Today",We.getDefaultTaskList());let r=ze.getProjects(),o=r.indexOf(r.find((n=>n.id===e)));ze.removeProject(o),rn(ze.getProjects()),document.querySelector(`[data-project="${e}"]`).remove(),console.log(t),console.log(ze.getProjects()),N()})()})),Array.from(i).forEach((e=>{e.addEventListener("click",(e=>{U(),q()}))})),Array.from(d).forEach((e=>{e.addEventListener("click",(e=>{p.classList.remove("is-visible")}))}));const R=()=>{const e=new Date;return console.log(e),e},J=e=>{let n,t=(0,xe.utcToZonedTime)(e,"UTC");if(t){const e=we(t,"d"),r=we(t,"MMMM"),o=we(t,"yyyy"),a=function(e){h(1,arguments);var n=b(e),t=n.getHours();return t}(t);n=`${r} ${e} ${o} at ${a}:${we(t,"mm")}${we(t,"aaa")}`,console.log(n)}else n=void 0;return n};return t.addEventListener("submit",(e=>{e.preventDefault(),(()=>{let e=l.value,n=s.value,t=u.value,r=X(Ye);e&&(Le(void 0,e,n,r,t),tn(We.getDefaultTaskList()))})(),U()})),r.addEventListener("submit",(e=>{e.preventDefault(),(e=>{e=L;let n=We.getDefaultTaskList().find((n=>n.id===e)),t=document.getElementById(`todo${e}`),r=t.firstElementChild.firstElementChild.lastElementChild.lastElementChild,o=t.firstElementChild.lastElementChild.firstElementChild;n.title=c.value,n.dueDate=f.value;let a=je(n.dueDate);o.innerText=a,r.innerText=n.title,n.desc=A.value,n.priority=X(m),Pe(t,n.priority),console.log(We.getDefaultTaskList()),tn(We.getDefaultTaskList())})(),q()})),S.addEventListener("submit",(e=>{e.preventDefault(),Fe(void 0,j.value),rn(ze.getProjects()),z()})),{setPriority:X,editItem:(e,t,r,o,a,i)=>{L=t,console.log(L),((e,n,t,r,o,a)=>{let i=We.getDefaultTaskList().find((e=>e.id===n));c.value=t,A.value=i.desc,f.value=i.dueDate,o=i.priority,console.log(o),G(o)})(0,t,r,0,a),n.classList.add("is-visible")},viewDetails:(e,n)=>{F=n,((e,n)=>{let t=We.getDefaultTaskList().find((e=>e.id===n)),r=je(t.dueDate);console.log(t.dateCreated);let o=J(t.dateCreated),a=t.priority.split("-")[1];console.log(a),g.innerText=t.title,t.desc?C.innerText=t.desc:C.innerText="no description...",v.innerText=a,y.innerText=t.project,Pe(x,t.priority,"high","medium","low"),w.innerText=r,B.innerText=o})(0,n),p.classList.add("is-visible")},openDeleteItemDialogue:e=>{T.classList.add("is-visible"),e&&(H=e)},openDeleteProjectDialogue:(e,n)=>{O.classList.add("is-visible"),((e,n)=>{Q=e,Z=n})(e,n)}}})(),_e={id:"0",title:"Example Todo",desc:"This is an example of a todo",priority:"priority-low",dueDate:"2023-01-08",dateCreated:"2023-01-18T18:28:44.626Z",project:"Today",completed:!1},Ue={id:"1",title:"Example Todo 2",desc:"This is the second example of a todo",priority:"priority-medium",dueDate:"2023-01-15",dateCreated:"2023-01-18T18:28:44.626Z",project:"Today",completed:!1},qe={id:"0",title:"work"},We=(()=>{let e=[_e,Ue];return{getDefaultTaskList:()=>e,addTask:n=>{e.push(n)},removeTask:n=>{n>-1&&e.splice(n,1)}}})(),ze=(()=>{let e=[qe];return{getProjects:()=>e,addProject:n=>{e.push(n)},removeProject:n=>{n>-1&&e.splice(n,1)}}})(),Ne=e=>{let n;return e.length<1?n=0:(n=Number(e.find((n=>n.id===e[e.length-1].id)).id),n++),String(n)},Le=(e,n,t,r,o,a,i,d)=>{i=document.querySelector(".main-title").innerText,a=new Date,e||(e=Ne(We.getDefaultTaskList()));let l=((e,n,t,r,o,a,i,d)=>({id:e,title:n,desc:t,priority:r,dueDate:o,dateCreated:a,project:i,completed:d}))(e,n,t,r,o,a,i,d);We.addTask(l),e>1&&tn(We.getDefaultTaskList()),console.log(We.getDefaultTaskList()),Se(e,n,t,r,o,d)},Fe=(e,n)=>{e||(e=Ne(ze.getProjects()));let t=((e,n)=>({id:e,title:n}))(e,n);ze.addProject(t),rn(ze.getProjects()),console.log(ze.getProjects()),Ee(e,n)},He=((()=>{const e=document.getElementById("theme-mode");e.addEventListener("change",(n=>{!0===e.checked?(document.documentElement.classList.remove("light"),document.documentElement.classList.add("dark"),window.localStorage.setItem("mode","dark")):(document.documentElement.classList.remove("dark"),document.documentElement.classList.add("light"),window.localStorage.setItem("mode","light"))}))})(),(()=>{const e=document.querySelector(".open-aside"),n=document.querySelector("nav");e.addEventListener("click",(e=>{He(n)}))})(),e=>{"250px"===e.style.width?e.style.width="0":e.style.width="250px"}),Qe=document.querySelector(".todo-list"),Ze=document.getElementById("all-tasks"),Ge=document.getElementById("today-tasks"),Xe=document.querySelector(".main-title"),Re=document.querySelector(".project-items"),Je=(document.querySelectorAll(".project-item"),document.querySelector("nav")),$e=window.matchMedia("(max-width: 625px)");let Ve,Ke;(e=>{let n;try{n=window.localStorage;const e="__storage_test__";return n.setItem(e,e),n.removeItem(e),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&n&&0!==n.length}})()?console.log("storage available"):console.log("storage not available");const en=()=>{Ve=JSON.parse(localStorage.getItem("todolist"))},nn=()=>{Ke=JSON.parse(localStorage.getItem("projectlist"))},tn=e=>{localStorage.setItem("todolist",JSON.stringify(e)),en()},rn=e=>{localStorage.setItem("projectlist",JSON.stringify(e)),nn()};if(localStorage.getItem("todolist")){if(en(),JSON.stringify(Ve)!==JSON.stringify(We.getDefaultTaskList())){let e=We.getDefaultTaskList();e.splice(0,e.length);for(let n of Ve)e.push(n)}console.log("Todo stuff"),console.log(Ve),console.log(We.getDefaultTaskList())}else localStorage.setItem("todolist",JSON.stringify(We.getDefaultTaskList())),en();if(localStorage.getItem("projectlist")){if(nn(),JSON.stringify(Ke)!==JSON.stringify(ze.getProjects())){let e=ze.getProjects();e.splice(0,e.length);for(let n of Ke)e.push(n)}console.log("Project-stuff"),console.log(Ke),console.log(ze.getProjects())}else localStorage.setItem("projectlist",JSON.stringify(ze.getProjects())),nn();Me("Today",Ve),(e=>{for(let n of e)Ee(n.id,n.title)})(Ke),Ze.addEventListener("click",(e=>{for(Xe.innerText="All";Qe.hasChildNodes();)Qe.removeChild(Qe.firstChild);Me("All",Ve),console.log(Ve),$e.matches&&(console.log("matched"),He(Je))})),Ge.addEventListener("click",(e=>{for(Xe.innerText="Today";Qe.hasChildNodes();)Qe.removeChild(Qe.firstChild);Me("Today",Ve),console.log(We.getDefaultTaskList()),$e.matches&&(console.log("matched"),He(Je))})),Re.addEventListener("click",(e=>{if(e.target.classList.contains("project-item")){for(Xe.innerText=e.target.children[1].innerText;Qe.hasChildNodes();)Qe.removeChild(Qe.firstChild);Me(e.target.children[1].innerText,Ve),console.log(Ke),$e.matches&&(console.log("matched"),He(Je))}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,